//****************************************************************************
//    Cylinder with End Caps Class
//****************************************************************************
// McKenzie Joyce
// CS480
public class Cylinder3D{
  private Point3D center;
  private float rx;
  private float ry;
  private float uMin;
  private float uMax;
  private int stacks,slices;
  public Mesh3D mesh;
  private final float vMin = (float)-Math.PI;
  private final float vMax = (float)Math.PI;

  public Cylinder3D(float _x, float _rx, float _y, float _ry, float _z, float _u, int _stacks, int _slices){
    center = new Point3D(_x,_y,_z);
    rx = _rx;
    ry = _ry;
    uMin = -_u;
    uMax = _u;
    stacks = _stacks;
    slices = _slices;
    initMesh();
  }
  public void set_center(float _x, float _y, float _z){
	center.x=_x;
	center.y=_y;
	center.z=_z;
	fillMesh();  
  }
  public void set_radius(float _rx, float _ry){
    rx = _rx;
    ry = _ry;
	fillMesh(); 
  }
  public void set_stacks(int _stacks){
	stacks = _stacks;
	initMesh(); 
  }

  public void set_slices(int _slices){
	slices = _slices;
	initMesh(); 
  }
  public int get_slices(){
	return slices;
  }

  public int get_stacks(){
	return stacks;
  }
  private void initMesh(){
	mesh = new Mesh3D(stacks,slices);
	// Set mesh vertices and normals
	fillMesh();  
  }
  private void fillMesh(){
	int i, j;
	float theta, phi;
	float d_phi = (uMax-uMin)/((float)slices-1);
	float d_theta = (vMax-vMin)/((float)stacks-1);
		
	float cos_theta;
	float sin_theta;
		
	Point3D d_uVector = new Point3D();
	Point3D d_vVector = new Point3D();
		
	for (i = 0, theta = vMin; i < stacks; ++i, theta += d_theta){
		cos_theta = (float)Math.cos(theta);
		sin_theta = (float)Math.sin(theta);
			
		for (j = 0, phi = uMin; j < slices; ++j, phi += d_phi) {			
			// Compute vertex
			mesh.v[i][j].x = center.x + rx * cos_theta;
			mesh.v[i][j].y = center.y + ry * sin_theta;
			mesh.v[i][j].z = center.z + phi;
				
			// Compute unit normal at vertex
			d_uVector.x = -rx * sin_theta;
			d_uVector.y = ry * cos_theta;
			d_uVector.z = 0;
				
			d_vVector.x = 0;
			d_vVector.y = 0;
			d_vVector.z = 1;
				
			d_uVector.crossProduct(d_vVector, mesh.n[i][j]);
			mesh.n[i][j].normalize();
		}
	}
	fillCaps(d_theta);
  }
  
  private void fillCaps(float d_theta){
	for (int i = 0, theta = (int) vMin; i < stacks; ++i, theta += d_theta){
		mesh.n[i][0] = new Point3D(0,0,-1);
		mesh.v[i][0] = new Point3D(center.x,center.y,center.z+uMin);
		mesh.n[i][slices-1] = new Point3D(0,0,1);
		mesh.v[i][slices-1] = new Point3D(center.x,center.y,center.z+uMax);
	}
  }

}
