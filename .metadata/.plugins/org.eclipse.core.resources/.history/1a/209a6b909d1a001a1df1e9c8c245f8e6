import java.awt.image.BufferedImage;

public class PhongSketchBase {
	public PhongSketchBase()
	{
		// deliberately left blank
	}
	public static void drawLine(BufferedImage buff, int[][] d_buff, Point3D p1, Point3D p2, Light light, Material material, Point3D view_vector)
	{
	    int x0=(int)p1.x, y0=(int)p1.y, z0=(int)p1.z;
	    int xEnd=(int)p2.x, yEnd=(int)p2.y, zEnd=(int)p2.z;
	    int dx = Math.abs(xEnd - x0),  dy = Math.abs(yEnd - y0), dz = Math.abs(zEnd - z0);

	    if(dx==0 && dy==0)
	    {
	    	return;
	    }
	    
	    // if slope is greater than 1, then swap the role of x and y
	    boolean x_y_role_swapped = (dy > dx); 
	    if(x_y_role_swapped)
	    {
	    	x0=(int)p1.y; 
	    	y0=(int)p1.x;
	    	xEnd=(int)p2.y; 
	    	yEnd=(int)p2.x;
	    	dx = Math.abs(xEnd - x0);
	    	dy = Math.abs(yEnd - y0);
	    }
	    
	    // initialize the decision parameter and increments
	    int p = 2 * dy - dx;
	    int twoDy = 2 * dy,  twoDyMinusDx = 2 * (dy - dx);
	    int x=x0, y=y0, z=z0;
	    
	    // set step increment to be positive or negative
	    int step_x = x0<xEnd ? 1 : -1;
	    int step_y = y0<yEnd ? 1 : -1;
	    int step_z = z0<zEnd ? 1 : -1;
	    
	    // deal with setup for color interpolation
	    // first get r,g,b integer values at the end points
	    float r0=p1.x, rEnd=p2.x;
	    float g0=p1.y, gEnd=p2.y;
	    float b0=p1.z, bEnd=p2.z;
	    
	    // compute the change in r,g,b 
	    float dr=Math.abs(rEnd-r0), dg=Math.abs(gEnd-g0), db=Math.abs(bEnd-b0);
	    
	    // set step increment to be positive or negative 
	    int step_r = r0<rEnd ? 1 : -1;
	    int step_g = g0<gEnd ? 1 : -1;
	    int step_b = b0<bEnd ? 1 : -1;
	    
	    // compute whole step in each color that is taken each time through loop
	    float whole_step_r = step_r*(dr/dx);
	    float whole_step_g = step_g*(dg/dx);
	    float whole_step_b = step_b*(db/dx);
	    
	    // compute remainder, which will be corrected depending on decision parameter
	    dr=dr%dx;
	    dg=dg%dx; 
	    db=db%dx;
	    
	    // initialize decision parameters for red, green, and blue
	    float p_r = 2 * dr - dx;
	    float twoDr = 2 * dr,  twoDrMinusDx = 2 * (dr - dx);
	    float r=r0;
	    
	    float p_g = 2 * dg - dx;
	    float twoDg = 2 * dg,  twoDgMinusDx = 2 * (dg - dx);
	    float g=g0;
	    
	    float p_b = 2 * db - dx;
	    float twoDb = 2 * db,  twoDbMinusDx = 2 * (db - dx);
	    float b=b0;
	    
	    // draw start pixel
	    if(x_y_role_swapped)
	    {
	    	if(x>=0 && x<buff.getHeight() && y>=0 && y<buff.getWidth()){
	    		//check depth buffer
	    		int new_z=z;
	    		int new_x=y;
	    		int new_y=buff.getHeight()-x-1;
	    		if (d_buff[new_x][new_y]<new_z){
	    			//r, g and b are interpreted as the x,y,z vector coordinates of the surface normal
	    			Point3D normal = new Point3D((float)r, (float)g, (float)b);
	    			ColorType color = new ColorType();
	    			//the normal is used to apply the light equation
	    			color = light.applyLight(material, view_vector, normal, color, new Point3D(new_x,new_y,new_z));
	    			//real r,g and b values are obtained for the pixel
	    			int r_ = color.getR_int();
	    			int g_ = color.getG_int();
	    			int b_ = color.getB_int();
	    			buff.setRGB(new_x, new_y, (r_<<16) | (g_<<8) | b_);
	    			d_buff[new_x][new_y]=new_z;
	    		}
	    	}
	    }
	    else
	    {
	    	if(y>=0 && y<buff.getHeight() && x>=0 && x<buff.getWidth()){
	    		//check depth buffer
	    		int new_z=z;
	    		int new_x=x;
	    		int new_y=buff.getHeight()-y-1;
	    		if (d_buff[new_x][new_y]<new_z){
	    			//r, g and b are interpreted as the x,y,z vector coordinates of the surface normal
    				Point3D normal = new Point3D((float)r, (float)g, (float)b);
    				ColorType color = new ColorType();
    				//the normal is used to apply the light equation
    				color = light.applyLight(material, view_vector, normal, color, new Point3D(new_x,new_y,new_z));
    				//real r,g and b values are obtained for the pixel
    				int r_ = color.getR_int();
    				int g_ = color.getG_int();
    				int b_ = color.getB_int();
    				buff.setRGB(new_x, new_y, (r_<<16) | (g_<<8) | b_);
	    			d_buff[new_x][new_y] =new_z;
	    		}
	    	}
	    }
	    
	    while (x != xEnd) 
	    {
	    	// increment x and y
	    	x+=step_x;
	    	z+=step_z;
	    	if (p < 0)
	    		p += twoDy;
	    	else 
	    	{
	    		y+=step_y;
	    		p += twoDyMinusDx;
	    	}
		        
	    	// increment r by whole amount slope_r, and correct for accumulated error if needed
	    	r+=whole_step_r;
	    	if (p_r < 0)
	    		p_r += twoDr;
	    	else 
	    	{
	    		r+=step_r;
	    		p_r += twoDrMinusDx;
	    	}
		    
	    	// increment g by whole amount slope_b, and correct for accumulated error if needed  
	    	g+=whole_step_g;
	    	if (p_g < 0)
	    		p_g += twoDg;
	    	else 
	    	{
	    		g+=step_g;
	    		p_g += twoDgMinusDx;
	    	}
		    
	    	// increment b by whole amount slope_b, and correct for accumulated error if needed
	    	b+=whole_step_b;
	    	if (p_b < 0)
	    		p_b += twoDb;
	    	else 
	    	{
	    		b+=step_b;
	    		p_b += twoDbMinusDx;
	    	}
		    
	    	if(x_y_role_swapped)
	    	{
	    		if(x>=0 && x<buff.getHeight() && y>=0 && y<buff.getWidth()){
	    			//check depth buff
	    			int new_x=y;
	    			int new_y=buff.getHeight()-x-1;
	    			int new_z=z;
		    		if (d_buff[new_x][new_y]<new_z){
		    			//r, g and b are interpreted as the x,y,z vector coordinates of the surface normal
	    				Point3D normal = new Point3D((float)r, (float)g, (float)b);
	    				ColorType color = new ColorType();
	    				//the normal is used to apply the light equation
	    				color = light.applyLight(material, view_vector, normal, color, new Point3D(new_x, new_y, new_z));
	    				int r_ = color.getR_int();
	    				int g_ = color.getG_int();
	    				int b_ = color.getB_int();
	    				//real r,g and b values are obtained for the pixel
	    				buff.setRGB(new_x, new_y, (r_<<16) | (g_<<8) | b_);
		    			d_buff[new_x][new_y]=new_z;
		    		}
	    		}
	    	}
	    	else
	    	{
	    		if(y>=0 && y<buff.getHeight() && x>=0 && x<buff.getWidth()){
	    			//check depth buff
	    			int new_x=x;
	    			int new_y=buff.getHeight()-y-1;
	    			int new_z=z;
		    		if (d_buff[new_x][new_y]<new_z){
		    			//r, g and b are interpreted as the x,y,z vector coordinates of the surface normal
	    				Point3D normal = new Point3D((float)r, (float)g, (float)b);
	    				ColorType color = new ColorType();
	    				//the normal is used to apply the light equation
	    				color = light.applyLight(material, view_vector, normal, color, new Point3D(new_x,new_y,new_z));
	    				int r_ = color.getR_int();
	    				int g_ = color.getG_int();
	    				int b_ = color.getB_int();
	    				//real r,g and b values are obtained for the pixel
	    				buff.setRGB(new_x, new_y, (r_<<16) | (g_<<8) | b_);
		    			d_buff[new_x][new_y]=new_z;
		    		}
	    		}
	    	}
	    }
	}
}
